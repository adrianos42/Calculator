mod en_us;
mod pt_br;

#[derive(PartialEq, Eq, Hash, Clone, Copy)]
pub enum EngineStringsId {
    PlusMinus,
    C,
    Ce,
    Backspace,
    DecimalSeparator,
    EmptyString,
    And,
    Or,
    Xor,
    Lsh,
    Rsh,
    Divide,
    Multiply,
    Plus,
    Minus,
    Mod,
    YRoot,
    PowHat,
    Int,
    Rol,
    Ror,
    Not,
    Sin,
    Cos,
    Tan,
    Sinh,
    Cosh,
    Tanh,
    Ln,
    Log,
    Sqrt,
    XPow2,
    XPow3,
    Nfactorial,
    Reciprocal,
    Dms,
    Powten,
    Percent,
    ScientificNotation,
    Pi,
    Equal,
    Mc,
    Mr,
    Ms,
    Mplus,
    Mminus,
    Exp,
    OpenParen,
    CloseParen,
    N0,
    N1,
    N2,
    N3,
    N4,
    N5,
    N6,
    N7,
    N8,
    N9,
    Na,
    Nb,
    Nc,
    Nd,
    Ne,
    Nf,
    Frac,
    Sind,
    Cosd,
    Tand,
    Asind,
    Acosd,
    Atand,
    Sinr,
    Cosr,
    Tanr,
    Asinr,
    Acosr,
    Atanr,
    Sing,
    Cosg,
    Tang,
    Asing,
    Acosg,
    Atang,
    Asinh,
    Acosh,
    Atanh,
    Powe,
    Powten2,
    Sqrt2,
    Sqr,
    Cube,
    Cubert,
    Fact,
    Reciproc,
    Degrees,
    Negate,
    Rsh2,
    Dividebyzero,
    Domain,
    Undefined,
    PosInfinity,
    NegInfinity,
    Aborted,
    Nomem,
    Toomany,
    Overflow,
    Noresult,
    InsufficientData,
    ErrUnkCh,
    ErrUnkFn,
    ErrUnexNum,
    ErrUnexCh,
    ErrUnexSz,
    ErrMismatchClose,
    ErrUnexEnd,
    ErrSgInvError,
    ErrInputOverflow,
    ErrOutputOverflow,
    Secd,
    Secg,
    Secr,
    Asecd,
    Asecr,
    Asecg,
    Cscd,
    Cscr,
    Cscg,
    Acscd,
    Acscr,
    Acscg,
    Cotd,
    Cotr,
    Cotg,
    Acotd,
    Acotr,
    Acotg,
    Sech,
    Asech,
    Csch,
    Acsch,
    Coth,
    Acoth,
    TwoPowX,
    LogBaseY,
    Abs,
    Floor,
    Ceil,
    Nand,
    Nor,
    CubeRoot,
    ProgrammerMod,
}

impl EngineStringsId {
    pub fn get_string(self) -> &'static str {
        "e"
    }
}
